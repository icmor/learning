
#lang sicp

;--------------------------------------------------

;; Exercise 1.9

;; (define (+ a b)
;;   (if (= a 0) b (inc (+ (dec a) b))))

;; (+ 4 5)
;; (inc (+ (dec 4) 5))
;; (inc (+ 3 5))
;; (inc (inc (+ (dec 3) 5)))
;; (inc (inc (+ 2 5)))
;; (inc (inc (inc (+ (dec 2) 5))))
;; (inc (inc (inc (+ 1 5))))
;; (inc (inc (inc (inc (+ (dec 1) 5)))))
;; (inc (inc (inc (inc (+ 0 5)))))
;; (inc (inc (inc (inc 5))))
;; (inc (inc (inc 6)))
;; (inc (inc 7))
;; (inc 8)
;; 9
;-----------
; RECURSIVE |
;-----------

;; (define (+ a b)
;;   (if (= a 0) b (+ (dec a) (inc b))))

;; (+ 4 5)
;; (+ (dec 4) (inc 5))
;; (+ 3 6)
;; (+ (dec 3) (inc 6))
;; (+ 2 7)
;; (+ (dec 2) (inc 7))
;; (+ 1 8)
;; (+ (dec 1) (inc 8))
;; (+ 0 9)
;; 9

;-----------
; ITERATIVE |
;-----------

;--------------------------------------------------

;; Exercise 1.10

;; Ackermann's function
(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1) (A x (- y 1))))))

(A 1 10)
(A 2 4)
(A 3 3)

;; (A 1 10)
;; (A 0 (A 1 9))
;; (A 0 (A 0 (A 1 8)))
;; (A 0 (A 0 (A 0 (A 1 7))))
;; (A 0 (A 0 (A 0 (A 0 (A 1 6)))))
;; (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 5))))))
;; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 4)))))))
;; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 3))))))))
;; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 2)))))))))
;; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 1))))))))))
;; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 2)))))))))
;; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 4))))))))
;; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 8)))))))
;; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 16))))))
;; (A 0 (A 0 (A 0 (A 0 (A 0 32)))))
;; (A 0 (A 0 (A 0 (A 0 64))))
;; (A 0 (A 0 (A 0 128)))
;; (A 0 (A 0 256))
;; (A 0 512)
;; 1024

;; (A 2 4)
;; (A 1 (A 2 3))
;; (A 1 (A 1 (A 2 2)))
;; (A 1 (A 1 (A 1 (A 2 1))))
;; (A 1 (A 1 (A 1 2)))
;; (A 1 (A 1 (A 0 (A 1 1))))
;; (A 1 (A 1 (A 0 2)))
;; (A 1 (A 1 4))
;; (A 1 (A 0 (A 1 3)))
;; (A 1 (A 0 (A 0 (A 1 2))))
;; (A 1 (A 0 (A 0 (A 0 (A 1 1)))))
;; (A 1 (A 0 (A 0 (A 0 2))))
;; (A 1 (A 0 (A 0 4)))
;; (A 1 (A 0 8))
;; (A 1 16)

;; (A 3 3)
;; (A 2 (A 3 2))
;; (A 2 (A 2 (A 3 1)))
;; (A 2 (A 2 2))
;; (A 2 (A 1 (A 2 1)))
;; (A 2 (A 1 2))
;; (A 2 (A 0 (A 1 1)))
;; (A 2 (A 0 2))
;; (A 2 4)

(define (f n) (A 0 n))
(define (g n) (A 1 n))
(define (h n) (A 2 n))
(define (k n) (* 5 n n))

;; (f n) => 2n
;; (g n) => 2 ** n
;; (h n) => 2^^n
;; (k n) => 5 * (n ** 2)

;--------------------------------------------------

;; Exercise 1.11

(define (F n)
  (if (< n 3)
      n
      (+ (F (- n 1))
         (* (F (- n 2)) 2)
         (* (F (- n 3)) 3))))

(define (I n)
  (define (compute n-1 n-2 n-3 counter)
    (if (= counter n)
        n-1
        (compute (+ n-1
                    (* n-2 2)
                    (* n-3 3))
                 n-1
                 n-2
                 (+ counter 1))))
  (if (< n 3)
      n
      (compute 2 1 0 2)))

;--------------------------------------------------

;; Exercise 1.12

(define (pascal row column)
  (if (or (= column 1)
          (= row column))
      1
      (+
       (pascal (- row 1)
               (- column 1))
       (pascal (- row 1)
               column))))

;--------------------------------------------------

;; Exercise 1.14

;; (count-change 11)
;; |
;; (cc 11 5)__
;; |          \
;; (cc 11 4)   (cc -39 5)
;; |       \___
;; |           \
;; (cc 11 3)   (cc -14 4)
;; |       \_______________________________________________________
;; |                                                               \
;; (cc 11 2)                                                      (cc 1 3)
;; |       \_________________________                              |     \__
;; |                                 \                             |        \
;; (cc 11 1)                        (cc 6 2)                      (cc 1 2) (cc -9 3)
;; |       \___                      |     \__                     |     \__
;; |           \                     |        \                    |        \
;; (cc 11 0)   (cc 10 1)            (cc 6 1) (cc 1 2)             (cc 1 1) (cc -4 2)
;;          __/ |                 __/ |       |     \__            |     \__
;;         /    |                /    |       |        \           |        \
;; (cc 10 0)   (cc 9 1)  (cc 6 0)   (cc 5 1) (cc 1 1) (cc -4 2)   (cc 1 0) (cc 0 1)
;;          __/ |                 __/ |       |     \__
;;         /    |                /    |       |        \
;; (cc 9 0)    (cc 8 1)  (cc 5 0)   (cc 4 1) (cc 1 0) (cc 0 1)
;;          __/ |                 __/ |
;;         /    |                /    |
;; (cc 8 0)    (cc 7 1)  (cc 4 0)   (cc 3 1)
;;          __/ |                 __/ |
;;         /    |                /    |
;; (cc 7 0)    (cc 6 1)  (cc 3 0)   (cc 2 1)
;;          __/ |                 __/ |
;;         /    |                /    |
;; (cc 6 0)    (cc 5 1)  (cc 2 0)   (cc 1 1)
;;          __/ |                 __/ |
;;         /    |                /    |
;; (cc 5 0)    (cc 4 1)  (cc 1 0)   (cc 0 1)
;;          __/ |
;;         /    |
;; (cc 4 0)    (cc 3 1)
;;          __/ |
;;         /    |
;; (cc 3 0)    (cc 2 1)
;;          __/ |
;;         /    |
;; (cc 2 0)    (cc 1 1)
;;          __/ |
;;         /    |
;; (cc 1 0)    (cc 0 1)

;; n = amount of change
;; Space: ϑ(n)
;; No. Steps: ϑ(n^5)

;--------------------------------------------------

;;Exercise 1.15

(define (cube x) (* x x x))
(define (p x) (- (* 3 x) (* 4 (cube x))))
(define (sine angle)
  (if (not (> (abs angle) 0.1))
      angle
      (p (sine (/ angle 3.0)))))

;; a. 5
;; b. Space: ϑ(log a)
;;    Time: ϑ(log a)

;--------------------------------------------------
